import numpy as np
file=open("exemple.txt","r")
lines=file.readlines()
dic={}

for l in lines[1:]:
    if "\n" in l:
        l=l[:-1]
    line=l.split(",")
    if int(line[0]) not in dic:
        dic[int(line[0])]=[int(line[1])]
    else:
        dic[int(line[0])].append(int(line[1]))

def adjacency(dic):
    adj=np.zeros((8,8),dtype=int)
    for key in dic:
        for val in dic[key]:
            adj[key-1][val-1]=1
    return adj

def leaders(adj):
    long=len(adj)
    lead=[0]*long
    for i in range (long):
        for j in range (long):
            if adj[i][j]==1:
                lead[j]+=1
    return lead

def followers(adj):
    long=len(adj)
    folo=[0]*long
    for i in range (long):
        for j in range (long):
            if adj[i][j]==1:
                folo[i]+=1
    return folo
adja=adjacency(dic)
print(leaders(adja))
print(followers(adja))
"""the two most important leaders: 1 and 2
the two best followers 3 and (1,4,5,7,8)
shortest path between the two leaders (1 an 2): 1 => 3 => 2 
not possible in the other way because 2 do not follow someone
need to draw the graph"""
